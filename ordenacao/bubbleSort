import java.util.Arrays;
class Main {
  public static void main(String[] args) {
    int[] v = {32, 17, 51, 8, 23};
    System.out.printf("Inicio -> %s\n", Arrays.toString(v));
    bubbleSort(v);
    System.out.printf("Fim -> %s\n", Arrays.toString(v));
    
  }

  public static void bubbleSort(int[] v) {
    for (int i = 0; i < v.length; i++) {
      for (int j = 0; j < v.length - 1; j++) {
        if (v[j] > v[j+1]) {
          int aux = v[j];
          v[j] = v[j+1];
          v[j+1] = aux;
        }
      }
      System.out.printf("Passagem %d -> %s \n", i, Arrays.toString(v)); 
    }
  }
}

#Algumas considerações sobre o código-fonte apresentado: 

O método bubbleSort apresentado entre as linhas 11 e 18 foi criado para auxiliar no processo de troca dos valores de posição dentro do vetor apenas para facilitar e deixar o código mais legível. 

No método bubble sort, foram necessários dois laços de repetição do tipo for. O primeiro, com a variável de controle i, representa a passagem pelo vetor. O for com a variável de controle j representa as iterações.

Na linha 20, foi inserida uma saída do programa para verificar o resultado de cada passagem do algoritmo.

Outro ponto importante sobre essa implementação é que, mesmo que o vetor esteja completamente ordenado, as passagens são executadas até o final. Realizar essas passagens com o vetor já ordenado apenas deixa o algoritmo mais ineficiente. 
